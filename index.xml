<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andy White</title>
    <link>https://andywhite.xyz/</link>
    <description>Recent content on Andy White</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Jan 2021 18:43:19 -0700</lastBuildDate><atom:link href="https://andywhite.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript &#43; fp-ts: ReaderTaskEither Foundations</title>
      <link>https://andywhite.xyz/posts/2021-01-27-rte-foundations/</link>
      <pubDate>Wed, 27 Jan 2021 18:43:19 -0700</pubDate>
      
      <guid>https://andywhite.xyz/posts/2021-01-27-rte-foundations/</guid>
      <description>ReaderTaskEither&amp;lt;R, E, A&amp;gt; Foundations    This post is meant to give some background information on the ReaderTaskEither&amp;lt;R, E, A&amp;gt; type from fp-ts.
What is a ReaderTaskEither?    To understand ReaderTaskEither&amp;lt;R, E, A&amp;gt; (aka RTE), it&amp;rsquo;s important to understand some of the lower-level fp-ts &amp;ldquo;effect types&amp;rdquo; upon which RTE is built. Note that in fp-ts, some of these types might be encoded slightly differently than below, but the concepts should be the same.</description>
    </item>
    
    <item>
      <title>A Layman&#39;s Guide to Applicatives in ReasonML</title>
      <link>https://andywhite.xyz/posts/2019-11-07-a-laymans-guide-to-applicatives-in-reasonml/</link>
      <pubDate>Thu, 07 Nov 2019 22:28:54 -0700</pubDate>
      
      <guid>https://andywhite.xyz/posts/2019-11-07-a-laymans-guide-to-applicatives-in-reasonml/</guid>
      <description>Other posts in this series:     A Layman&amp;rsquo;s Guide to Functors in ReasonML  Applicative functors    I&amp;rsquo;ll start this post off with a tantalizing quote that I first heard from a former colleague/mentor Kris Nuttycombe:
 In functional programming, applicatives are the essence of parallel processing, and monads are the essence of sequential processing.
 In this post about applicative functors (aka applicatives), and my next planned post about monads, I hope to dig into this notion, and try to impart some intuition as to why this is true.</description>
    </item>
    
    <item>
      <title>A Layman&#39;s Guide to Functors in ReasonML</title>
      <link>https://andywhite.xyz/posts/2019-11-01-a-laymans-guide-to-functors-in-reasonml/</link>
      <pubDate>Fri, 01 Nov 2019 17:50:46 -0600</pubDate>
      
      <guid>https://andywhite.xyz/posts/2019-11-01-a-laymans-guide-to-functors-in-reasonml/</guid>
      <description>In my intro post I talked about my background and how I started on my journey to learn typed functional programming. I&amp;rsquo;ll again preface these posts with a note that I don&amp;rsquo;t have a background in category theory, so these posts are intended to help introduce things from a boots-on-the-ground perspective. Please feel free to correct me on any points I&amp;rsquo;ve messed up. I&amp;rsquo;m also not an OCaml expert, so there may be techniques or coding conventions here that are not completely correct.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://andywhite.xyz/projects/</link>
      <pubDate>Fri, 01 Nov 2019 13:31:20 -0600</pubDate>
      
      <guid>https://andywhite.xyz/projects/</guid>
      <description>ReasonML    My colleague Michael Martin-Smucker and I develop and maintain a small but growing ecosystem of libraries for ReasonML/BuckleScript in the Reazen GitHub org.
 relude  relude is our &amp;ldquo;standard library replacement&amp;rdquo; for ReasonML/BuckleScript. The purpose of this library is to provide a &amp;ldquo;batteries included&amp;rdquo; style of prelude/stdlib based on the powerful abstractions from category theory and abstract algebra. The library was primarily inspired by the ecosystems of Haskell, PureScript and Scala libraries like scalaz, cats, and shapeless In addition to the math-based abstractions, we provide all the other helper modules and functions that you&amp;rsquo;d expect from a reasonable standard library.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://andywhite.xyz/about/</link>
      <pubDate>Fri, 01 Nov 2019 13:17:24 -0600</pubDate>
      
      <guid>https://andywhite.xyz/about/</guid>
      <description>Hi, my name is Andy White, and this is my personal website.
I live in Erie, Colorado (near Boulder) with my wife and three kids, and I work as a full-stack software developer.
I&amp;rsquo;ve lived in Colorado my whole life - I was born in Denver, grew up mostly in Colorado Springs, and then bounced around the Denver metro area in my adult life.
I attended the University of Colorado at Boulder, and studied Electrical/Computer Engineering.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://andywhite.xyz/posts/2019-10-31-hello-world/</link>
      <pubDate>Thu, 31 Oct 2019 21:11:53 -0600</pubDate>
      
      <guid>https://andywhite.xyz/posts/2019-10-31-hello-world/</guid>
      <description>The world of typed functional programming is a vast, mind-blowing, and often terrifying place. There are so many things to learn and so many rabbit holes to go down, it&amp;rsquo;s easy to get overwhelmed, and not know where to even start. For most of my software development career, I operated in blissful ignorance of functional programming - I happily wrote object-oriented and imperative code, mutating data and throwing all sorts of exceptions, and I was actually pretty content with it.</description>
    </item>
    
  </channel>
</rss>
